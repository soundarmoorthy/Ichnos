<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ErrCannotUpdateSymbolList" xml:space="preserve">
    <value>Cannot update Symbol list in the current context. Please update the symbol list when not in a active debug session</value>
  </data>
  <data name="ErrorAddingSymbol" xml:space="preserve">
    <value>An error occured while adding the symbol {0}.</value>
  </data>
  <data name="ErrorEvaulatingSymbol" xml:space="preserve">
    <value>Failed to Evaulate the Symbol {0}.</value>
  </data>
  <data name="ErrorOutputStreamIsNullOrEmpty" xml:space="preserve">
    <value>The ITraceStream is either null or empty. No valid ITraceStream is specified to Trace manager to write trace data. Cannot continue.</value>
  </data>
  <data name="ErrorSymbolSourceIsNullOrEmpty" xml:space="preserve">
    <value>Unable to get the list of symbols. Symbol Source is either null or Empty</value>
  </data>
  <data name="ErrorUnableToGetShellInstance" xml:space="preserve">
    <value>"Unable to get an instance of IVsUIShell. Error messages will not be shown properly</value>
  </data>
  <data name="ExtensionTitle" xml:space="preserve">
    <value>Ichnos (Debug Tracing) Extension for Studio</value>
  </data>
  <data name="MsgAlreadySubscribedForDbgBreak" xml:space="preserve">
    <value>The instance of the trace manager has already registered for debugger break events</value>
  </data>
  <data name="MsgDbgBreakEventSubscribeSuccess" xml:space="preserve">
    <value>Succesfully subscribed to the Debugger break event</value>
  </data>
  <data name="MsgDebuggerEventsObjNull" xml:space="preserve">
    <value>Unable to get  DebuggerEvents Property from DTE</value>
  </data>
  <data name="MsgDTEInitializedFailed" xml:space="preserve">
    <value>Failed to get an instance of DTE. Tracing is impossible. Please report to the extension vendor</value>
  </data>
  <data name="MsgSymbolsReturnedSuccesfully" xml:space="preserve">
    <value>Succesfully returned the list of symbols.</value>
  </data>
  <data name="MsgTraceInitialized" xml:space="preserve">
    <value>Trace Manager Initialized.</value>
  </data>
  <data name="ErrTraceSymbolInvalid" xml:space="preserve">
    <value>The Trace symbol is not valid in this context. Details :  {0}</value>
  </data>
  <data name="MsgBreakpointContextFormat" xml:space="preserve">
    <value>Symbol Name : {0}, Function Name : {1}, File Name {2}</value>
  </data>
  <data name="ErrTraceListenerThrowsExceptionOnWrite" xml:space="preserve">
    <value>An exception had been thrown by the ITraceListener {0}</value>
  </data>
  <data name="ErrTraceSessionInProgress" xml:space="preserve">
    <value>Cannot set the trace context with the current state of the Environment. A Trace Session is already in progress. Please try when the trace session is completed.</value>
  </data>
  <data name="MsgBreakEventHandlerUnsubscribed" xml:space="preserve">
    <value>The Event handler for break event is unsubscribed by the trace manager.</value>
  </data>
  <data name="MsgMessagePumpAlreadyInitialized" xml:space="preserve">
    <value>The Message Pump that processes all the messges and writes them to the listeners is already initialized</value>
  </data>
</root>